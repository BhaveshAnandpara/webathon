{"ast":null,"code":"var _jsxFileName = \"C:\\\\Webathon\\\\artisticdots\\\\src\\\\Pages\\\\Home\\\\Home.jsx\";\nimport React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'; //(use it after camera)\n\nimport { BufferAttribute, BufferGeometry } from 'three'; // import dat from 'dat.gui'\n\nimport { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper.js';\nimport canvas from '../../Pages/Home/Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  const scene = new THREE.Scene();\n  const texturLoader = new THREE.TextureLoader();\n  const star = texturLoader.load(texture); //Sphere PArticles\n  // //geometry \n  // const particalGeometry = new THREE.SphereBufferGeometry( 1, 16, 16)\n  //Material\n  // const particleMaterial = new THREE.PointsMaterial({\n  //     size : 0.02,\n  //     sizeAttenuation : true //Gives perspective small if far and big if near\n  // })    \n  // //Particals\n  // const particle = new THREE.Points(particalGeometry, particleMaterial)\n  // scene.add(particle)\n  //Customs Geometry\n\n  const particalGeometry = new THREE.BufferGeometry();\n  const count = 20000;\n  const positions = new Float32Array(count * 3); //Count * 3 because there is x  ,y, ,z to a single particle\n\n  const colors = new Float32Array(count * 3);\n\n  for (let i = 0; i < count * 3; i++) {\n    positions[i] = (Math.random() - 0.5) * 10;\n    colors[i] = Math.random();\n  }\n\n  particalGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n  particalGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3)); //Material\n\n  const particleMaterial = new THREE.PointsMaterial({\n    size: 0.1,\n    sizeAttenuation: true,\n    //Gives perspective small if far and big if near\n    // color : 0xff88cc, //hide so other colors won't be impacted\n    transparent: true,\n    alphaMap: star,\n    //shows black edges from image \n    // alphaTest : 0.001 //Basically Telling renderer to not render the black part of image\n    // depthTest : false, //Basically says donot render which is forward and which is behind solves issue but not good when there is an object\n    depthWrite: false,\n    //THis solves all our Issues\n    blending: THREE.AdditiveBlending,\n    //Glows if there is particle over another ,\n    vertexColors: true //Whithout it wont change colors\n\n  }); //Particals\n\n  const particle = new THREE.Points(particalGeometry, particleMaterial);\n  scene.add(particle); // //Cube\n  // const square = new THREE.Mesh(\n  //     new THREE.BoxBufferGeometry(1 , 1 , 1),\n  //     new THREE.MeshBasicMaterial()\n  // )\n  // scene.add(square)\n\n  /**\r\n   * Lights\r\n   */\n\n  const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n  scene.add(ambientLight); //rezise function\n  // window.addEventListener('resize' , () => {\n  // sizes.width = window.innerWidth,\n  //    sizes.height = window.innerHeight,\n  //    camera.aspect = sizes.width / sizes.height,\n  //    camera.updateProjectionMatrix()\n  //    renderer.setSize(sizes.width ,sizes.height) //Sets size for the renderer \n  // })\n\n  const sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n  /**\r\n   * Camera\r\n   */\n\n  const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height);\n  camera.position.z = 3;\n  scene.add(camera);\n  const canvas = document.querySelector('.webgl');\n  console.log(canvas);\n  const renderer = new THREE.WebGLRenderer({\n    canvas: canvas // Canvas for WEBGL\n\n  });\n  renderer.setSize(sizes.width, sizes.height); //Sets size for the renderer \n  //Controls \n\n  const controls = new OrbitControls(camera, canvas);\n  controls.enableDamping = true; //need to update per frame (in tick function)\n  //Clock \n\n  const clock = new THREE.Clock(); //Animations\n\n  function tick() {\n    //Creating a function for Animation \n    const elapsedTime = clock.getElapsedTime(); //UPdate Particles\n    //All Particles\n    // particle.position.y = - elapsedTime * 0.02 \n    //By Single Particle (Very BAd for performance as we are using it to change position for every particle)\n\n    for (let i = 0; i < count; i++) {\n      const n = i * 3; //So that it can access direct x position of every particle -- xyz xyz xyz so that it can jump every 3 elements\n\n      const x = particalGeometry.attributes.position.array[n];\n      particalGeometry.attributes.position.array[n + 1] = Math.sin(elapsedTime + x); //n + 1 will access y \n    }\n\n    particalGeometry.attributes.position.needsUpdate = true; //to update attributes\n    //Update Controls\n\n    controls.update(); //render\n\n    renderer.render(scene, camera);\n    window.requestAnimationFrame(tick); // requestAnimationFrame() runs at 60 Frames per Second(FPS)\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"webgl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","THREE","OrbitControls","BufferAttribute","BufferGeometry","RectAreaLightHelper","canvas","Home","scene","Scene","texturLoader","TextureLoader","star","load","texture","particalGeometry","count","positions","Float32Array","colors","i","Math","random","setAttribute","particleMaterial","PointsMaterial","size","sizeAttenuation","transparent","alphaMap","depthWrite","blending","AdditiveBlending","vertexColors","particle","Points","add","ambientLight","AmbientLight","sizes","width","window","innerWidth","height","innerHeight","camera","PerspectiveCamera","position","z","document","querySelector","console","log","renderer","WebGLRenderer","setSize","controls","enableDamping","clock","Clock","tick","elapsedTime","getElapsedTime","n","x","attributes","array","sin","needsUpdate","update","render","requestAnimationFrame"],"sources":["C:/Webathon/artisticdots/src/Pages/Home/Home.jsx"],"sourcesContent":["import React from 'react'\r\nimport * as THREE from 'three'\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls' //(use it after camera)\r\nimport { BufferAttribute, BufferGeometry } from 'three'\r\n// import dat from 'dat.gui'\r\nimport { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper.js'\r\nimport canvas from '../../Pages/Home/Home'\r\n\r\n\r\nexport default function Home() {\r\n\r\nconst scene = new THREE.Scene()\r\nconst texturLoader = new THREE.TextureLoader()\r\n\r\nconst star = texturLoader.load(texture)\r\n\r\n\r\n\r\n\r\n//Sphere PArticles\r\n\r\n// //geometry \r\n// const particalGeometry = new THREE.SphereBufferGeometry( 1, 16, 16)\r\n\r\n//Material\r\n// const particleMaterial = new THREE.PointsMaterial({\r\n    //     size : 0.02,\r\n//     sizeAttenuation : true //Gives perspective small if far and big if near\r\n// })    \r\n\r\n// //Particals\r\n\r\n// const particle = new THREE.Points(particalGeometry, particleMaterial)\r\n// scene.add(particle)\r\n\r\n\r\n\r\n\r\n//Customs Geometry\r\n\r\nconst particalGeometry = new THREE.BufferGeometry()\r\nconst count = 20000\r\n\r\nconst positions = new Float32Array(count * 3) //Count * 3 because there is x  ,y, ,z to a single particle\r\nconst colors = new Float32Array(count * 3)  \r\n\r\nfor(let i = 0 ; i < count *3 ; i++){\r\n    positions[i] = (Math.random() - 0.5) * 10\r\n    colors[i] = Math.random()\r\n}\r\n\r\nparticalGeometry.setAttribute(\r\n    'position', \r\n    new THREE.BufferAttribute(positions , 3)\r\n)\r\n\r\nparticalGeometry.setAttribute(\r\n    'color', \r\n    new THREE.BufferAttribute(colors , 3)\r\n)\r\n\r\n//Material\r\nconst particleMaterial = new THREE.PointsMaterial({\r\n    size : 0.1,\r\n    sizeAttenuation : true, //Gives perspective small if far and big if near\r\n    // color : 0xff88cc, //hide so other colors won't be impacted\r\n    transparent : true,\r\n    alphaMap : star, //shows black edges from image \r\n    // alphaTest : 0.001 //Basically Telling renderer to not render the black part of image\r\n    // depthTest : false, //Basically says donot render which is forward and which is behind solves issue but not good when there is an object\r\n    depthWrite : false, //THis solves all our Issues\r\n    blending : THREE.AdditiveBlending, //Glows if there is particle over another ,\r\n    vertexColors : true //Whithout it wont change colors\r\n\r\n\r\n    \r\n \r\n})   \r\n\r\n//Particals\r\n\r\nconst particle = new THREE.Points(particalGeometry, particleMaterial)\r\nscene.add(particle)\r\n\r\n// //Cube\r\n\r\n// const square = new THREE.Mesh(\r\n//     new THREE.BoxBufferGeometry(1 , 1 , 1),\r\n//     new THREE.MeshBasicMaterial()\r\n// )\r\n// scene.add(square)\r\n\r\n\r\n/**\r\n * Lights\r\n */\r\n\r\nconst ambientLight = new THREE.AmbientLight(0xffffff , 0.5)\r\nscene.add(ambientLight)\r\n//rezise function\r\n\r\n// window.addEventListener('resize' , () => {\r\n\r\n// sizes.width = window.innerWidth,\r\n//    sizes.height = window.innerHeight,\r\n\r\n//    camera.aspect = sizes.width / sizes.height,\r\n//    camera.updateProjectionMatrix()\r\n\r\n//    renderer.setSize(sizes.width ,sizes.height) //Sets size for the renderer \r\n\r\n// })\r\n\r\n\r\n\r\nconst sizes = {\r\n\r\n    width : window.innerWidth,\r\n    height : window.innerHeight,\r\n}\r\n\r\n\r\n/**\r\n * Camera\r\n */\r\n\r\n\r\nconst camera = new THREE.PerspectiveCamera(75 , (sizes.width / sizes.height) )\r\n\r\ncamera.position.z = 3 \r\n\r\nscene.add(camera)\r\n\r\n\r\n\r\n\r\nconst  canvas = document.querySelector('.webgl')\r\nconsole.log(canvas)\r\n\r\n\r\nconst  renderer = new THREE.WebGLRenderer({\r\n    canvas : canvas,  // Canvas for WEBGL\r\n})\r\n \r\nrenderer.setSize(sizes.width ,sizes.height) //Sets size for the renderer \r\n\r\n\r\n//Controls \r\nconst controls = new OrbitControls(camera , canvas)\r\ncontrols.enableDamping = true //need to update per frame (in tick function)\r\n\r\n//Clock \r\n\r\nconst clock = new THREE.Clock()\r\n\r\n//Animations\r\nfunction tick  () { //Creating a function for Animation \r\n\r\n\r\n    const elapsedTime = clock.getElapsedTime()\r\n\r\n    //UPdate Particles\r\n\r\n    //All Particles\r\n    // particle.position.y = - elapsedTime * 0.02 \r\n\r\n    //By Single Particle (Very BAd for performance as we are using it to change position for every particle)\r\n\r\n    for(let i = 0 ; i < count ; i ++){\r\n\r\n        const n = i * 3 //So that it can access direct x position of every particle -- xyz xyz xyz so that it can jump every 3 elements\r\n\r\n        const x = particalGeometry.attributes.position.array[n]\r\n        particalGeometry.attributes.position.array[n + 1] = Math.sin(elapsedTime + x) //n + 1 will access y \r\n\r\n    }\r\n\r\n    particalGeometry.attributes.position.needsUpdate = true //to update attributes\r\n    \r\n    //Update Controls\r\n    controls.update()\r\n\r\n\r\n    //render\r\n    renderer.render(scene , camera);    \r\n\r\n    window.requestAnimationFrame(tick) // requestAnimationFrame() runs at 60 Frames per Second(FPS)\r\n\r\n\r\n}\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <>\r\n    <div>Home</div>\r\n    <canvas className=\"webgl\"></canvas>\r\n    </>\r\n  )\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}